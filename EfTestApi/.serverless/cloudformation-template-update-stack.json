{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "BaseApiLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/efc-test-api-development"
      }
    },
    "BaseApiLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/efc-test-api/development/1617191198998-2021-03-31T11:46:38.998Z/efcq-test-api.zip"
        },
        "FunctionName": "efc-test-api-development",
        "Handler": "EfTestApi::EfTestApi.LambdaEntryPoint::FunctionHandlerAsync",
        "MemorySize": 2048,
        "Role": {
          "Fn::GetAtt": [
            "lambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "dotnetcore3.1",
        "Timeout": 15,
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "CONNECTION_STRING": "Host=ef-test-database-sp.chrsicf7m9wc.eu-west-2.rds.amazonaws.com;Port=5432;Database=dvdrental;Username=postgres;Password=mypassword"
          }
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0525e1742fc163c02"
          ],
          "SubnetIds": [
            "subnet-0b80baa7e9b845c9a",
            "subnet-075c844707f98cba3"
          ]
        }
      },
      "DependsOn": [
        "BaseApiLogGroup",
        "lambdaExecutionRole"
      ]
    },
    "BaseApiLambdaVersion3RR6Q34zTr9t7DFKjloiOl7o6VBcJd1lf2CCrq9y8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "BaseApiLambdaFunction"
        },
        "CodeSha256": "aP/lIEnK663WMy8XX8LIR2m0DIo6hHpAVFjuFqJHNK4="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "development-efc-test-api",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceProxyVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodProxyVarAny": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceProxyVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "BaseApiLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1617191197892": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "development"
      },
      "DependsOn": [
        "ApiGatewayMethodProxyVarAny"
      ]
    },
    "ApiGatewayApiKeySecureAccess1": {
      "Type": "AWS::ApiGateway::ApiKey",
      "Properties": {
        "Enabled": true,
        "Name": "api-key-efc-test-api-development",
        "StageKeys": [
          {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "development"
          }
        ]
      },
      "DependsOn": "ApiGatewayDeployment1617191197892"
    },
    "ApiGatewayUsagePlanSecureAccess": {
      "Type": "AWS::ApiGateway::UsagePlan",
      "DependsOn": "ApiGatewayDeployment1617191197892",
      "Properties": {
        "ApiStages": [
          {
            "ApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "Stage": "development"
          }
        ],
        "Description": "Usage plan \"secureAccess\" for efc-test-api development stage",
        "UsagePlanName": "efc-test-api-secureAccess-development"
      }
    },
    "ApiGatewayUsagePlanKeySecureAccess1": {
      "Type": "AWS::ApiGateway::UsagePlanKey",
      "Properties": {
        "KeyId": {
          "Ref": "ApiGatewayApiKeySecureAccess1"
        },
        "KeyType": "API_KEY",
        "UsagePlanId": {
          "Ref": "ApiGatewayUsagePlanSecureAccess"
        }
      }
    },
    "BaseApiLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "BaseApiLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "lambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/efc-test-api/development/",
        "RoleName": "efc-test-api-lambdaExecutionRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
          "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess"
        ],
        "Policies": [
          {
            "PolicyName": "manageLogs",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:logs",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          "log-group:/aws/lambda/*:*:*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "ServerlessDeploymentBucket"
                        }
                      ]
                    ]
                  }
                }
              ]
            }
          },
          {
            "PolicyName": "lambdaInvocation",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "BaseApiLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "BaseApiLambdaVersion3RR6Q34zTr9t7DFKjloiOl7o6VBcJd1lf2CCrq9y8"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/development"
          ]
        ]
      }
    }
  }
}